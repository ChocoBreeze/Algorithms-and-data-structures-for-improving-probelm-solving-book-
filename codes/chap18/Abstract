NP Hard 문제를 어떻게 대해야 할지.

1. NP Hard 문제와 마주치기
입력값에 따라 현실적인 시간대에 답을 도출할 가능성이 존재함.
또한 작업 중인 NP Hard 문제가 최적화 문제라면 진짜 최적해가 아니더라도 근삿값이면 충분한 경우도 존재함

2. 특수한 경우로 풀리는 방법
7.3절의 구간 스케줄링 문제는 특수한 그래프에 대한 최대 안정 집합 문제라고 할 수 있음. (18_1)+
동적 계획법을 사용하는 해법은 트리에서 시작해 적용 범위를 넓혀 트리 성향이 강한 그래프에 대한 해법으로 자연스럽게 흘러가는 점이 중요함.
그래프가 트리에 얼마나 가까운지를 나타내는 척도인 tree-width를 조사해보기.
tree-width(트리 너비)가 일정 수준 이하인 그래프라면 효율적인 알고리즘 설계가 가능함.


3. 탐욕법
현실의 많은 문제는 탐욕법으로 얻은 답이 최적은 아니더라도 최적해에 가까운 답인 경우가 많음.
- Knapsack problem
  주의할 점 2가지
    1) 설정을 조금만 바꾸더라도 탐욕법으로 최적해 도출이 가능하다. --> 문제 조건을 조금 느슨하게, 다루기 쉽게 만들기(=relaxation(완화))
      특히 정수만 받는 변수를 연속값(실수)도 받도록 만든 완화를 연속 완화(continuous relaxation)이라 함.
      연속 완화한 knapsack 문제는 탐욕법으로 해결이 가능함.
    2) 악의적인 입력값을 고찰하는 것이 알고리즘 개선에 유효하다.
    
4. 국소 탐색과 담금질 기법
다항식 시간으로 풀 수 없어 보이는 최적화 문제를 마주하는 방법 : 적용 가능 범위가 넓은 국소 탐색(local search)
변수 x에 대해 함수 f(x)를 최소화하고 싶은 문제에 있어, 적당한 초기값(x=x0)에서 출발해 f(x)가 줄어드는 방향으로 조금씩 x를 변경하는 수법.
국소 최적해(local minimum)가 전체 최적해(global minimum)가 아닐 수 있음.

-국소 최적해를 벗어나는 여러 개선 방법이 있으며, simulated annealing(담금질 기법)도 그 중 하나.


5. 분기 한정법(branch and bound)
최적화 문제에 대한 알고리즘 설계 기법.
전체 탐색을 하면서 현재까지 찾은 가장 좋은 답보다 더 나은 답을 찾을 수 없다고 판명된 선택지라면 그 이후의 탐색을 생략해서 계산 시간을 단축하는 것을 노림.
--> pruning(가지치기)
대부분의 분기 한정법은 복잡도 그 자체를 줄여주지 않음.
하지만 다양한 개선법을 이용하면 실제로 문제를 풀 때 무척 빠르게 동작하는 경우도 많음.


6. 정수계획 문제로 공식화
최소화 문제(minimize)
minimize objective function subject to constraints
정수 변수를 사용해서 목적 함수와 제약 조건이 모두 1차원으로 표현되는 최적화 문제를 integer programming problem(정수 계획 문제)이라 하며,
knapsack 문제도 정수 계획 문제에 포함된다.
고성능인 정수 계획 문제 solver가 있으므로, NP Hard로 보이는 문제를 정수 계획 문제로 공식화할 수 잇을지 생각해 보는 건 좋은 방법임.

7. 근사 알고리즘
연구자와 실무자의 관점 차이.
최대화 문제에서 근사해를 구하는 다항식 시간 알고리즘을 A라 하고, 입력 I에 대한 답을 A(I), I에 대한 최적값을 OPT(I)라 합니다.
어떠한 입력 I에 대해서도, A(I) >= (1/K)*OPT(I)
이 식이 성립할 때 A 는 K-factor approximation algorithm)(k-근사 알고리즘)이라 하고, k를 A의 근사비(approximation ration)라 함.

8. 정리
풀고 싶은 문제에 따라 기존의 알고리즘을 유연하게 바꾸거나 다양한 알고리즘 설계 기겁을 자유자재로 구사하는 능력이 중요함.
풀리지 않는 문제를 잘 알아두는 것도 알고리즘 설계자에게 유용함.(근사해를 구하는 방향으로 전환)
