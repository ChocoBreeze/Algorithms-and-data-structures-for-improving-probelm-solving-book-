1. Union-find(합집합 찾기)
그룹 분할을 효율적으로 관리할 수 있는 자료 구조로, rooted tree 구조를 사용함.
다음과 같은 query를 빠르게 처리 가능함. (N개의 요소에 대해 다루며, 초기 상태는 모두가 다른 그룹에 속한다고 가정함)
issame(x,y) : 요소 x, y가 같은 그룹에 속하는지 여부를 조사함
unite(x,y) : 요소 x를 포함한 그룹과 요소 y를 포함한 그룹끼리 합침.

2. Union-find 구조
그룹 하나하나가 root tree를 구성함으로써 실현할 수 있으며, 이진 트리(힙이나 이진 탐색 트리와 다르게)일 필요는 없음.

-root(x) : 요소 x를 포함하는 그룹(루트 트리)의 루트를 반환함.
issame --> root(x)가 root(y)와 같은지 여부 판정
unite --> root(x), root(y)로 해서 root(x)가 root(y)의 자식 꼭짓점이 되도록 연결함

3. Union-Find 복잡도를 줄이는 방법.
Union-Find의 쿼리 처리는 각 꼭짓점 x에 대해 root(x)를 구하는 처리가 중심임.
각 쿼리 처리의 복잡도는 루트 트리의 높이가 h일 때 O(h)이며, h는 최대 N-1이라 비효율적임.
--
두 개선법을 적용하면 무척 빠르게 처리가 가능함.
(1) union by size(union by rank)
(2) 경로 압축
(1), (2) 모두 적용하는 경우 O(alpha(N))까지 줄일 수 있으며, (alpha : Ackermann 함수의 역함수)
- 둘 중 하나만 처리해도 O(logN)까지 줄일 수 있음.

4. Union-Find 개선법 1: union by size --> 다양하게 활용이 가능함
union by rank(Union-Find에 한정해서 사용 가능)
unite (x, y) : 구현에서 vertex 개수가 적은 쪽 루트 트리의 루트가 자식이 되도록 연결함.
크기가 작은 쪽의 자료 구조를 큰 쪽에 병합 --> 다른 자료 구조의 병합에도 일반적으로 사용하는 기법임

5. Union-Find 개선법 2: 경로 압축
root(x)에 관한 개선임.
기존의 vertex에서 root까지 가는 경로에 있는 vertex들에 대해서 그 부모를 root에 가져다 붙이는 작업을 수행함.
간단히 배열을 하나 더 짜서 par[x] = root로 저장하는 방식을 이용함.

6. Union-find 구현 (11_3)

7. Union-find 응용 : 그래프 연결 요소 개수 (11_4)
무향 그래프의 연결 요소 개수를 세는 문제 - DFS, BFS도 유용함.
Union_find를 사용해서 연결 요소를 group으로 취급하여 해결 가능함
--> 루트 트리의 루트가 되는 꼭짓점 개수 세기

8. 정리
Union-find는 그룹 나누기를 효율적으로 관리하는 자료 구조임.
적용 범위도 넓으며 그래프와 관련된 많은 문제를 Union-Find로 해결 가능함.
Kruskal alg를 고속화 할때됴 사용 가능.
