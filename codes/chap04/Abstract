자기 자신을 호출하는 것 = recursive call(재귀 호출)
재귀 호출을 하는 함수 = recursive function

base case에 대한 고려

기본 재귀 예시 (4_1, 4_2)

사용 예
1. Euclidean algorithm (4_4)
m을 n으로 나눈 나머지 r은 GCD(m,n) = GCD(n,r)
if r==0 --> n이 gcd
if r!=0 --> GCD(n,r)

2. Fibonacci (4_5, 4_6, 4_7) 
F(n) = F(n-1) + F(n-2)(n>=2)
F(0) = 0, F(1) = 1

3. Memoization - 동적 계획법 (4_8)
이전에 계산한 값을 메모리에 저장하고 같은 인수라면 저장한 값을 쓰자.
cache라고 부르는 방식 : 결과를 아는 경우 계산하지말고 저장된 값을 바로 돌려 주기.
dynamic programming이라는 framework를 재귀 함수를 사용해서 실현한 것.

4. 재귀함수를 사용한 전체 탐색 (4_9)
1) 부분합 문제
특정 원소를 선택하거나 선택하지 않은 두 가지 경우로 나누어 분할 정복
Memoization을 통해 O(2^n) --> O(NW)로 개선 가능

5. 분할 정복법(Divide and Conquer)
주어진 문제를 몇 가지 부분 문제로 분해한 후 각 부분 문제를 재귀적으로 풀고 그 답을 조합해 원래 문제의 답을 구성하는 알고리즘 기법
진가 : 이미 다항식 시간이 걸리는 알고리즘을 구한 문제에 대해 더 빠른 알고리즘을 위해 의식적으로 사용하는 경우
해당 방식의 복잡도에 대해서는 입력 크기 N에 관한 계산 시간 T(N)과 관련된 점화식을 생각해 봄.
