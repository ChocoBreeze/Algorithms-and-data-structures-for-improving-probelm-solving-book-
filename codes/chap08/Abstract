자료 구조 : 자료를 가지고 있는 방법

1. 자료구조를 배우는 의미
query : 자료 구조에 값을 넣어 관리하거나 자료 구조에서 원하는 값을 꺼내는 요구

2. 배열(array) (8_1)
각각의 요소에 간단히 접근할 수 있는 자료 구조
C++ --> std::vector 사용
인덱스를 지정해서 빠르게 접근할 수 있는 것이 배열의 강점. O(1)의 복잡도 - random access

아래의 행동은 성능 저하가 큼 - 최악의 경우 O(N)
요소 x를 요소 y의 삽입하기
요소 x를 삭제하기

3. 연결 리스트(linked list) (8_2)
삽입, 삭제 작업을 O(1) 복잡도로 실행 가능함
더미 노드(아무것도 없는 노드)를 이용하면 삽입, 삭제 작업을 깔끔하게 구현 가능함. --> sentinel node(감시 노드)
-자기 참조 구조체(self-referencing structure)를 사용하는 방법이 있음.

4. 연결 리스트 삽입과 삭제 (8_3, 8_4, 8_5, 8_6)
삽입
삭제 - 편리를 위해 bidirectional linked list 사용 --> 8_5, 8_6

5. 배열과 연결 리스트 비교
배열 : random access(O(1)) / 삽입, 삭제 (O(N)) (마지막 위치에 삽입은 O(1))
연결 리스트 : 삽입, 삭제(O(N)) / random access(O(N))
검색은 배열과 연결 리스트 모두 O(N)

검색이 빠른 자료 구조 
--> 해시 테이블 : O(1) / 자가 균형 이진 탐색 트리 : O(logN)

6. 해시 테이블
M은 양의 정수, x는 0 이상 M 미만 정수일 때 --> 삽입, 삭제, 검색 모두 O(1)에 수행 가능.
T[x] : 자료 구조에 값 x가 존재하는지 여부를 나타내는 값(true 또는 false) --> 이런 배열을 bucket이라 함. --> 12.8의 bucket 정렬
발상은 매력적이나 x의 범위가 제한됨 --> Hash table 도입(hash function 이용)
서로 다른 값에 대해 다른 해시값을 만들어 내는 해시 함수를 완전 해시 함수라 할 때, 이를 이용하면 삽입, 삭제, 검색 모두
O(1)에 수행가능한 Hash table을 만들 수 있음.
hash collision --> linked list 이용
simple uniform hashing assumption 만족 시, 해시 테이블 각 요소에 접근하는데 필요한 시간 복잡도는 평균적으로 O(1 + N/M)이 됨.

C++ --> unordered_set을 이용함., set을 이용하는 방법도 있음(이 경우에 삽입, 삭제, 검색을 각각 O(logN)으로 처리함)
std::set은 self-balancing binary search tree의 일종인 red-black tree를 사용해서 실현하는 경우가 많다.

-연상 배열
숫자 인덱스가 아닌 문자 인덱스 등을 이용함 -->  std::unordered_map, std::map(O(logN))을 이용함.


처리하고 싶은 query type에 맞추어 자료구조를 선택하자!
